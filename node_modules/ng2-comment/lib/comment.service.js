"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
require('rxjs');
var Comment = (function () {
    function Comment(_id, message, name, email, parent_id, replying, unique_id, upvotes, downvotes) {
        this._id = _id;
        this.message = message;
        this.name = name;
        this.email = email;
        this.parent_id = parent_id;
        this.replying = replying;
        this.unique_id = unique_id;
        this.upvotes = upvotes;
        this.downvotes = downvotes;
    }
    return Comment;
}());
exports.Comment = Comment;
var CommentService = (function () {
    function CommentService(http) {
        this.http = http;
    }
    CommentService.prototype.getComments = function () {
        return this.http.get(this.commentsUrl())
            .toPromise()
            .then(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    CommentService.prototype.getCommentsWithReplies = function () {
        console.log("Inside comment.service >> getCommentsWithReplies");
        return this.http.get(this.apiUrl() + '/commentsWithReplies')
            .toPromise()
            .then(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    CommentService.prototype.save = function (comment) {
        if (comment._id) {
            return this.put(comment);
        }
        else {
            return this.post(comment);
        }
    };
    CommentService.prototype.post = function (comment) {
        var headers = new http_1.Headers({
            'Content-Type': 'application/json'
        });
        return this.http
            .post(this.commentsUrl(), JSON.stringify(comment), { headers: headers })
            .toPromise()
            .then(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    CommentService.prototype.put = function (comment) {
        var headers = new http_1.Headers({
            'Content-Type': "application/json"
        });
        var url = this.commentsUrl() + "/" + comment._id;
        return this.http
            .put(url, JSON.stringify(comment), { headers: headers })
            .toPromise()
            .then(function () { return comment; })
            .catch(this.handleError);
    };
    CommentService.prototype.handleError = function (error) {
        console.log('An error occurred: ');
        console.log(error);
        return Promise.reject(error.message || error);
    };
    CommentService.prototype.apiUrl = function () {
        return this.config.server_ip_addr + '/api';
    };
    CommentService.prototype.commentsUrl = function () {
        return this.apiUrl() + '/comments';
    };
    CommentService.prototype.clearComments = function () {
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        var url = this.commentsUrl() + "/clear/*";
        return this.http
            .delete(url, { headers: headers })
            .toPromise()
            .catch(this.handleError);
    };
    CommentService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], CommentService);
    return CommentService;
}());
exports.CommentService = CommentService;
//# sourceMappingURL=comment.service.js.map