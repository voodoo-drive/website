"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var comment_service_1 = require('./comment.service');
var comment_form_html = require("./comment-form.component.html");
var CommentFormComponent = (function () {
    function CommentFormComponent(commentService) {
        this.commentService = commentService;
        this.commentAdded = new core_1.EventEmitter();
    }
    CommentFormComponent.prototype.new_comment = function () {
        return {
            _id: '',
            message: '',
            name: '',
            email: '',
            parent_id: '',
            replying: false,
            unique_id: '',
            upvotes: 0,
            downvotes: 0
        };
    };
    CommentFormComponent.prototype.ngOnInit = function () {
        this.reset();
    };
    CommentFormComponent.prototype.reset = function () {
        this.comment = this.new_comment();
        if (!this.parent)
            this.parent = this.new_comment();
        this.comment.parent_id = this.parent._id;
    };
    CommentFormComponent.prototype.onSubmit = function () {
        var _this = this;
        if (!this.comment.name)
            this.comment.name = 'Anonymous';
        if (!this.comment.email)
            this.comment.email = 'anonymous@comment.app';
        var component = this;
        this.commentService.save(this.comment)
            .then(function (comment) {
            if (!component.comment.parent_id) {
                component.reset();
            }
            else {
                component.parent.replying = false;
            }
            _this.commentAdded.emit(true);
        }, function (error) {
            alert(error.text());
            console.log(error.text());
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', comment_service_1.Comment)
    ], CommentFormComponent.prototype, "parent", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], CommentFormComponent.prototype, "commentAdded", void 0);
    CommentFormComponent = __decorate([
        core_1.Component({
            selector: 'comment-form',
            template: comment_form_html
        }), 
        __metadata('design:paramtypes', [comment_service_1.CommentService])
    ], CommentFormComponent);
    return CommentFormComponent;
}());
exports.CommentFormComponent = CommentFormComponent;
//# sourceMappingURL=comment-form.component.js.map