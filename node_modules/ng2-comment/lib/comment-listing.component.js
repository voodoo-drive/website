"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var comment_service_1 = require('./comment.service');
var comment_listing_html = require("./comment-listing.component.html");
var comment_listing_css = require("./comment-listing.component.css");
var comment_listing_css_string = comment_listing_css.toString();
var CommentListingComponent = (function () {
    function CommentListingComponent(commentService) {
        this.commentService = commentService;
        this.user = { canDelete: true };
    }
    CommentListingComponent.prototype.ngOnInit = function () {
        this.getCommentsWithReplies();
    };
    CommentListingComponent.prototype.getComments = function () {
        var _this = this;
        this.commentService.getComments().then(function (comments) {
            _this.comments = comments;
        });
    };
    CommentListingComponent.prototype.getCommentsWithReplies = function () {
        var component = this;
        console.log('checkpoint 1: ');
        console.log(component);
        this.commentService.getCommentsWithReplies().then(function (comments) {
            component.comments = comments;
            console.log('checkpoint 2: ');
            console.log(component);
            component.commentsTreeExpanded = component.expandCommentsTree(component.comments);
            console.log('checkpoint 3: ');
            console.log(component);
        });
    };
    CommentListingComponent.prototype.expandCommentsTree = function (comments) {
        var result = [];
        var component = this;
        comments.forEach(function (comment) {
            result.push(comment);
            var temp;
            if (comment.replies) {
                console.log('Recursive call to get replies of...');
                console.log(comment);
                temp = component.expandCommentsTree(comment.replies);
                result.push.apply(result, temp);
            }
        });
        return result;
    };
    CommentListingComponent.prototype.refresh = function (proceed) {
        this.getCommentsWithReplies();
    };
    CommentListingComponent.prototype.upvoted = function (comment) {
        comment.upvotes++;
        this.commentService.save(comment).then(function (comment) { });
    };
    CommentListingComponent.prototype.downvoted = function (comment) {
        comment.downvotes++;
        this.commentService.save(comment).then(function (comment) { });
    };
    CommentListingComponent.prototype.clear = function () {
        var component = this;
        this.commentService.clearComments()
            .then(function () {
            component.refresh(true);
        });
    };
    CommentListingComponent = __decorate([
        core_1.Component({
            selector: 'comment-listing',
            template: comment_listing_html,
            styles: [comment_listing_css_string]
        }), 
        __metadata('design:paramtypes', [comment_service_1.CommentService])
    ], CommentListingComponent);
    return CommentListingComponent;
}());
exports.CommentListingComponent = CommentListingComponent;
//# sourceMappingURL=comment-listing.component.js.map