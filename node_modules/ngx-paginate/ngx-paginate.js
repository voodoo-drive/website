import { Component, EventEmitter, Input, NgModule, Output } from '@angular/core';
import { CommonModule } from '@angular/common';

const defaults = {
    spanPages: 2,
    previousPage: true,
    nextPage: true,
    firstPage: true,
    lastPage: true,
    titles: {
        firstPage: 'First',
        previousPage: 'Previous',
        lastPage: 'Last',
        nextPage: 'Next',
        pageSize: 'Items per page'
    },
    pageSizes: [{
            value: 5,
            display: '5'
        }, {
            value: 10,
            display: '10'
        }, {
            value: 15,
            display: '15'
        }]
};
class NgxPaginateComponent {
    constructor() {
        this.pageChange = new EventEmitter();
        this.range = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.range = [];
        this.setOptions();
        this.calculateRange();
        this.pageChange.emit(this.page);
    }
    /**
     * @return {?}
     */
    setOptions() {
        if (!this.options) {
            this.options = defaults;
        }
        if (!this.options.titles) {
            this.options.titles = defaults.titles;
        }
        this.internalOptions = {
            spanPages: this.options.spanPages || defaults.spanPages,
            previousPage: this.options.previousPage !== undefined ? this.options.previousPage : defaults.previousPage,
            nextPage: this.options.nextPage !== undefined ? this.options.nextPage : defaults.nextPage,
            firstPage: this.options.firstPage !== undefined ? this.options.firstPage : defaults.firstPage,
            lastPage: this.options.lastPage !== undefined ? this.options.lastPage : defaults.lastPage,
            titles: {
                firstPage: this.options.titles.firstPage || defaults.titles.firstPage,
                previousPage: this.options.titles.previousPage || defaults.titles.previousPage,
                lastPage: this.options.titles.lastPage || defaults.titles.lastPage,
                nextPage: this.options.titles.nextPage || defaults.titles.nextPage,
                pageSize: this.options.titles.pageSize || defaults.titles.pageSize
            },
            pageSizes: this.options.pageSizes || defaults.pageSizes.slice()
        };
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    setPageSize(pageSize) {
        this.page.pageSize = parseInt(pageSize, 10);
        this.pageChange.emit(this.page);
    }
    /**
     * @return {?}
     */
    calculateRange() {
        this.range.length = 0;
        this.page.numberOfPages = Math.ceil(this.page.totalItems / this.page.pageSize);
        if (this.page.numberOfPages === 0) {
            this.page.numberOfPages = 1;
        }
        let /** @type {?} */ upperSpan;
        // if we can add span in front of current page, add it
        if (this.page.currentPage - this.options.spanPages > 0) {
            for (let /** @type {?} */ i = this.page.currentPage - this.options.spanPages; i < this.page.currentPage; i++) {
                this.range.push(i);
            }
            upperSpan = this.options.spanPages;
        }
        else {
            // if not, add as much as you can after it and adjust upper span
            upperSpan = this.options.spanPages * 2;
            for (let /** @type {?} */ i = 1; i < this.page.currentPage; i++) {
                this.range.push(i);
                upperSpan--;
            }
        }
        this.range.push(this.page.currentPage);
        if (this.page.currentPage + upperSpan <= this.page.numberOfPages) {
            for (let /** @type {?} */ i = this.page.currentPage + 1; i <= this.page.currentPage + upperSpan; i++) {
                this.range.push(i);
            }
        }
        else {
            for (let /** @type {?} */ i = this.page.currentPage + 1; i <= this.page.numberOfPages; i++) {
                this.range.push(i);
                upperSpan--;
            }
            if (upperSpan > 0) {
                // something is still left, prepend it to array (only if bigger than 0)
                while (upperSpan > 0 && this.range[0] - 1 > 0) {
                    this.range.unshift(this.range[0] - 1);
                    upperSpan--;
                }
            }
        }
    }
    /**
     * @param {?} page
     * @return {?}
     */
    setPage(page) {
        if (this.page.currentPage !== page) {
            this.page.currentPage = page;
            this.calculateRange();
            this.pageChange.emit(this.page);
        }
    }
    /**
     * @return {?}
     */
    previousPage() {
        if (this.page.currentPage > 1) {
            this.setPage(this.page.currentPage - 1);
        }
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (this.page.currentPage < this.page.numberOfPages) {
            this.setPage(this.page.currentPage + 1);
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.page) {
            this.calculateRange();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['options'] && changes['options'].currentValue) {
            this.setOptions();
        }
    }
}
NgxPaginateComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-paginate',
                template: `
    <div class="page-size-selection">
      <span>{{internalOptions.titles.pageSize}}</span>
      <select (change)="setPageSize($event.target.value)">
        <option *ngFor="let opt of internalOptions.pageSizes">{{opt.display}}</option>
      </select>
    </div>
    <div class="pages">
      <span
        class="first-page-button page-entry"
        *ngIf="internalOptions.firstPage"
        (click)="setPage(1)"
        [ngClass]="{'disabled':page.currentPage === 1}">
        {{internalOptions.titles.firstPage}}
      </span>
      <span
        class="prev-button page-entry"
        *ngIf="internalOptions.previousPage"
        (click)="previousPage()"
        [ngClass]="{'disabled':page.currentPage === 1}">
        {{internalOptions.titles.previousPage}}
      </span>
      <span class="page-selection">
        <span
          *ngFor="let num of range"
          class="page-entry"
          [ngClass]="{'active': num === page.currentPage}"
          (click)="setPage(num)">{{num}}</span>
      </span>
      <span
        class="next-button page-entry"
        *ngIf="internalOptions.nextPage"
        (click)="nextPage()"
        [ngClass]="{'disabled':page.currentPage === page.numberOfPages}">
          {{internalOptions.titles.nextPage}}
      </span>
      <span
        class="last-page-button page-entry"
        *ngIf="internalOptions.lastPage"
        (click)="setPage(page.numberOfPages)"
        [ngClass]="{'disabled':page.currentPage === page.numberOfPages}">
        {{internalOptions.titles.lastPage}}
      </span>
    </div>
  `,
                styles: [`
    :host {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      width: 100%;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      -webkit-box-pack: justify;
          -ms-flex-pack: justify;
              justify-content: space-between; }

    .page-selection {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center; }

    select {
      height: 30px; }

    .pages {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex; }

    .page-entry {
      height: 30px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      border: none;
      background-color: #EEEDEE;
      margin: 0 1px;
      cursor: pointer;
      white-space: nowrap;
      min-width: 14px;
      width: auto;
      padding: 0 8px; }
      .page-entry.active {
        color: white;
        background-color: #b6b6b6;
        cursor: default; }
      .page-entry.disabled {
        opacity: 0.3;
        cursor: default; }
  `]
            },] },
];
/**
 * @nocollapse
 */
NgxPaginateComponent.ctorParameters = () => [];
NgxPaginateComponent.propDecorators = {
    'options': [{ type: Input },],
    'page': [{ type: Input },],
    'pageChange': [{ type: Output },],
};

class NgxPaginateModule {
}
NgxPaginateModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                exports: [NgxPaginateComponent],
                declarations: [NgxPaginateComponent]
            },] },
];
/**
 * @nocollapse
 */
NgxPaginateModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { NgxPaginateModule, NgxPaginateComponent as Éµa };
//# sourceMappingURL=ngx-paginate.js.map
