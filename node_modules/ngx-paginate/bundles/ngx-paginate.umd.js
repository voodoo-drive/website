(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['ngx-paginate'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

var defaults = {
    spanPages: 2,
    previousPage: true,
    nextPage: true,
    firstPage: true,
    lastPage: true,
    titles: {
        firstPage: 'First',
        previousPage: 'Previous',
        lastPage: 'Last',
        nextPage: 'Next',
        pageSize: 'Items per page'
    },
    pageSizes: [{
            value: 5,
            display: '5'
        }, {
            value: 10,
            display: '10'
        }, {
            value: 15,
            display: '15'
        }]
};
var NgxPaginateComponent = /** @class */ (function () {
    function NgxPaginateComponent() {
        this.pageChange = new core.EventEmitter();
        this.range = [];
    }
    /**
     * @return {?}
     */
    NgxPaginateComponent.prototype.ngOnInit = function () {
        this.range = [];
        this.setOptions();
        this.calculateRange();
        this.pageChange.emit(this.page);
    };
    /**
     * @return {?}
     */
    NgxPaginateComponent.prototype.setOptions = function () {
        if (!this.options) {
            this.options = defaults;
        }
        if (!this.options.titles) {
            this.options.titles = defaults.titles;
        }
        this.internalOptions = {
            spanPages: this.options.spanPages || defaults.spanPages,
            previousPage: this.options.previousPage !== undefined ? this.options.previousPage : defaults.previousPage,
            nextPage: this.options.nextPage !== undefined ? this.options.nextPage : defaults.nextPage,
            firstPage: this.options.firstPage !== undefined ? this.options.firstPage : defaults.firstPage,
            lastPage: this.options.lastPage !== undefined ? this.options.lastPage : defaults.lastPage,
            titles: {
                firstPage: this.options.titles.firstPage || defaults.titles.firstPage,
                previousPage: this.options.titles.previousPage || defaults.titles.previousPage,
                lastPage: this.options.titles.lastPage || defaults.titles.lastPage,
                nextPage: this.options.titles.nextPage || defaults.titles.nextPage,
                pageSize: this.options.titles.pageSize || defaults.titles.pageSize
            },
            pageSizes: this.options.pageSizes || defaults.pageSizes.slice()
        };
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    NgxPaginateComponent.prototype.setPageSize = function (pageSize) {
        this.page.pageSize = parseInt(pageSize, 10);
        this.pageChange.emit(this.page);
    };
    /**
     * @return {?}
     */
    NgxPaginateComponent.prototype.calculateRange = function () {
        this.range.length = 0;
        this.page.numberOfPages = Math.ceil(this.page.totalItems / this.page.pageSize);
        if (this.page.numberOfPages === 0) {
            this.page.numberOfPages = 1;
        }
        var /** @type {?} */ upperSpan;
        // if we can add span in front of current page, add it
        if (this.page.currentPage - this.options.spanPages > 0) {
            for (var /** @type {?} */ i = this.page.currentPage - this.options.spanPages; i < this.page.currentPage; i++) {
                this.range.push(i);
            }
            upperSpan = this.options.spanPages;
        }
        else {
            // if not, add as much as you can after it and adjust upper span
            upperSpan = this.options.spanPages * 2;
            for (var /** @type {?} */ i = 1; i < this.page.currentPage; i++) {
                this.range.push(i);
                upperSpan--;
            }
        }
        this.range.push(this.page.currentPage);
        if (this.page.currentPage + upperSpan <= this.page.numberOfPages) {
            for (var /** @type {?} */ i = this.page.currentPage + 1; i <= this.page.currentPage + upperSpan; i++) {
                this.range.push(i);
            }
        }
        else {
            for (var /** @type {?} */ i = this.page.currentPage + 1; i <= this.page.numberOfPages; i++) {
                this.range.push(i);
                upperSpan--;
            }
            if (upperSpan > 0) {
                // something is still left, prepend it to array (only if bigger than 0)
                while (upperSpan > 0 && this.range[0] - 1 > 0) {
                    this.range.unshift(this.range[0] - 1);
                    upperSpan--;
                }
            }
        }
    };
    /**
     * @param {?} page
     * @return {?}
     */
    NgxPaginateComponent.prototype.setPage = function (page) {
        if (this.page.currentPage !== page) {
            this.page.currentPage = page;
            this.calculateRange();
            this.pageChange.emit(this.page);
        }
    };
    /**
     * @return {?}
     */
    NgxPaginateComponent.prototype.previousPage = function () {
        if (this.page.currentPage > 1) {
            this.setPage(this.page.currentPage - 1);
        }
    };
    /**
     * @return {?}
     */
    NgxPaginateComponent.prototype.nextPage = function () {
        if (this.page.currentPage < this.page.numberOfPages) {
            this.setPage(this.page.currentPage + 1);
        }
    };
    /**
     * @return {?}
     */
    NgxPaginateComponent.prototype.ngDoCheck = function () {
        if (this.page) {
            this.calculateRange();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPaginateComponent.prototype.ngOnChanges = function (changes) {
        if (changes['options'] && changes['options'].currentValue) {
            this.setOptions();
        }
    };
    return NgxPaginateComponent;
}());
NgxPaginateComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ngx-paginate',
                template: "\n    <div class=\"page-size-selection\">\n      <span>{{internalOptions.titles.pageSize}}</span>\n      <select (change)=\"setPageSize($event.target.value)\">\n        <option *ngFor=\"let opt of internalOptions.pageSizes\">{{opt.display}}</option>\n      </select>\n    </div>\n    <div class=\"pages\">\n      <span\n        class=\"first-page-button page-entry\"\n        *ngIf=\"internalOptions.firstPage\"\n        (click)=\"setPage(1)\"\n        [ngClass]=\"{'disabled':page.currentPage === 1}\">\n        {{internalOptions.titles.firstPage}}\n      </span>\n      <span\n        class=\"prev-button page-entry\"\n        *ngIf=\"internalOptions.previousPage\"\n        (click)=\"previousPage()\"\n        [ngClass]=\"{'disabled':page.currentPage === 1}\">\n        {{internalOptions.titles.previousPage}}\n      </span>\n      <span class=\"page-selection\">\n        <span\n          *ngFor=\"let num of range\"\n          class=\"page-entry\"\n          [ngClass]=\"{'active': num === page.currentPage}\"\n          (click)=\"setPage(num)\">{{num}}</span>\n      </span>\n      <span\n        class=\"next-button page-entry\"\n        *ngIf=\"internalOptions.nextPage\"\n        (click)=\"nextPage()\"\n        [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n          {{internalOptions.titles.nextPage}}\n      </span>\n      <span\n        class=\"last-page-button page-entry\"\n        *ngIf=\"internalOptions.lastPage\"\n        (click)=\"setPage(page.numberOfPages)\"\n        [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n        {{internalOptions.titles.lastPage}}\n      </span>\n    </div>\n  ",
                styles: ["\n    :host {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      width: 100%;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -webkit-box-pack: justify;\n          -ms-flex-pack: justify;\n              justify-content: space-between; }\n\n    .page-selection {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-pack: center;\n          -ms-flex-pack: center;\n              justify-content: center; }\n\n    select {\n      height: 30px; }\n\n    .pages {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex; }\n\n    .page-entry {\n      height: 30px;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -webkit-box-pack: center;\n          -ms-flex-pack: center;\n              justify-content: center;\n      border: none;\n      background-color: #EEEDEE;\n      margin: 0 1px;\n      cursor: pointer;\n      white-space: nowrap;\n      min-width: 14px;\n      width: auto;\n      padding: 0 8px; }\n      .page-entry.active {\n        color: white;\n        background-color: #b6b6b6;\n        cursor: default; }\n      .page-entry.disabled {\n        opacity: 0.3;\n        cursor: default; }\n  "]
            },] },
];
/**
 * @nocollapse
 */
NgxPaginateComponent.ctorParameters = function () { return []; };
NgxPaginateComponent.propDecorators = {
    'options': [{ type: core.Input },],
    'page': [{ type: core.Input },],
    'pageChange': [{ type: core.Output },],
};
var NgxPaginateModule = /** @class */ (function () {
    function NgxPaginateModule() {
    }
    return NgxPaginateModule;
}());
NgxPaginateModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule
                ],
                exports: [NgxPaginateComponent],
                declarations: [NgxPaginateComponent]
            },] },
];
/**
 * @nocollapse
 */
NgxPaginateModule.ctorParameters = function () { return []; };

exports.NgxPaginateModule = NgxPaginateModule;
exports.ɵa = NgxPaginateComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-paginate.umd.js.map
